// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	types "github.com/cosmos/cosmos-sdk/types"
	mock "github.com/stretchr/testify/mock"
)

// AnteHandler is an autogenerated mock type for the AnteHandler type
type AnteHandler struct {
	mock.Mock
}

// AnteHandler provides a mock function with given fields: ctx, tx, simulate
func (_m *AnteHandler) AnteHandler(ctx types.Context, tx types.Tx, simulate bool) (types.Context, error) {
	ret := _m.Called(ctx, tx, simulate)

	var r0 types.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, types.Tx, bool) (types.Context, error)); ok {
		return rf(ctx, tx, simulate)
	}
	if rf, ok := ret.Get(0).(func(types.Context, types.Tx, bool) types.Context); ok {
		r0 = rf(ctx, tx, simulate)
	} else {
		r0 = ret.Get(0).(types.Context)
	}

	if rf, ok := ret.Get(1).(func(types.Context, types.Tx, bool) error); ok {
		r1 = rf(ctx, tx, simulate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAnteHandler creates a new instance of AnteHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAnteHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *AnteHandler {
	mock := &AnteHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
